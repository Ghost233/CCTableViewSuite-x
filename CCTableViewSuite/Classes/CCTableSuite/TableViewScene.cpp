////  TableViewScene.m//  GTable////  Created by Sangwoo Im on 6/4/10.//  Copyright 2010 Sangwoo Im. All rights reserved.//#include "TableViewScene.h"#include "MyCell.h"#include "MyDoubleSizedCell.h"#include "GTableViewCell.h"#include "GMultiTableView.h"// Implementation TableViewSceneCCScene* TableViewScene::scene(){    CCScene *scene;    scene = CCScene::create();    scene->addChild(TableViewScene::create());    return scene;}TableViewScene* TableViewScene::create(){    TableViewScene *temp = new TableViewScene();    temp->init();    temp->autorelease();    return temp;}bool TableViewScene::init(){    this->CCLayer::init();    CCSize            winSize, cSize;            cSize   = MyCell::cellSize();    winSize = CCDirector::sharedDirector()->getWinSize();    hTable  = GTableView::tableViewWithDataSource(this, CCSizeMake(winSize.width, cSize.height));    hTable->retain();    vTable  = GTableView::tableViewWithDataSource(this, CCSizeMake(cSize.width, winSize.height-cSize.height));    vTable->retain();    mhTable = GMultiTableView::multiTableView(this, CCSizeMake(cSize.width * 2, cSize.height * 3));    mhTable->retain();    mvTable = GMultiTableView::multiTableView(this, CCSizeMake(cSize.width * 2, cSize.height * 2));    mvTable->retain();            mhTable->setClipToBounds(true);    mvTable->setClipToBounds(true);    mbTable = GMultiTableView::multiTableView(this, MyDoubleSizedCell::cellSize());    mbTable->retain();            hTable->setDirection(GScrollViewDirectionHorizontal);    mhTable->setDirection(GScrollViewDirectionHorizontal);    vTable->setDirection(GScrollViewDirectionVertical);    mvTable->setDirection(GScrollViewDirectionVertical);    mbTable->setDirection(GScrollViewDirectionBoth);            CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFramesWithFile("cell.plist");            hTable->setPosition(ccp(0.0, 0.0));    vTable->setPosition(ccp(0.0, cSize.height));    mhTable->setPosition(ccp(cSize.width, cSize.height));    mvTable->setPosition(ccp(cSize.width + mhTable->getViewSize().width , cSize.height));    mbTable->setPosition(ccp(cSize.width + mhTable->getViewSize().width + mvTable->getViewSize().width, cSize.height));    hTable->setTDelegate(this);    vTable->setTDelegate(this);    mhTable->setTDelegate(this);    mvTable->setTDelegate(this);    mbTable->setTDelegate(this);    mbTable->setColCount(2);            this->addChild(hTable);    this->addChild(vTable);    this->addChild(mvTable);    this->addChild(mhTable);    this->addChild(mbTable);            hTable->reloadData();    vTable->reloadData();    mvTable->reloadData();    mhTable->reloadData();    mbTable->reloadData();        return true;}void TableViewScene::table_cellTouched(GTableView *table, GTableViewCell *cell, CCPoint localpoint){    CCLOG("cell touched at index: %i,      %f %f", cell->getIdx(), localpoint.x, localpoint.y);}CCSize TableViewScene::cellSizeForTable(GTableView *table){    if (table == mbTable)    {        return MyDoubleSizedCell::cellSize();    }    return MyCell::cellSize();}GTableViewCell* TableViewScene::table_cellAtIndex(GTableView *table, int idx){    GTableViewCell *cell;    CCString        *spriteName;    CCSprite        *sprite;        cell       = table->dequeueCell();    spriteName = CCString::createWithFormat("cell%i.png", idx%10);    sprite     = CCSprite::createWithSpriteFrameName(spriteName->getCString());    if (!cell) {        if (table == mbTable) {            cell = new MyDoubleSizedCell();            cell->autorelease();        } else {            cell = new MyCell();            cell->autorelease();        }    }        cell->setMnode(sprite);        if (table == mbTable)    {        sprite->setScale(2);    }        CCLabelTTF* label = CCLabelTTF::create(CCString::createWithFormat("%d",idx)->getCString(), "Marker Felt", 20);    label->setPosition(ccp(20,20));    label->setColor(ccGREEN);    cell->getMnode()->addChild(label);        return cell;}int TableViewScene::numberOfCellsInTableView(GTableView *table){    return 20;}