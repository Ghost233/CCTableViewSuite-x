////  GTableView.h//  GTable////  http://www.opensource.org/licenses/mit-license.php////  Created by Sangwoo Im on 6/3/10.//  Copyright 2010 Sangwoo Im. All rights reserved.//#ifndef __GTableView_H__#define __GTableView_H__#include "cocos2d.h"using namespace cocos2d;#include "GTableViewSuiteConfig.h"#include "GScrollView.h"#include "GScrollViewDelegate.h"#include "GTableViewDataSource.h"#include "GTableViewDelegate.h"#include "GTableViewCell.h"/** * UITableView counterpart for cocos2d for iphone. * * this is a very basic, minimal implementation to bring UITableView-like component into cocos2d world. *  */class GTableView : public GScrollView, public GScrollViewDelegate{public:    ~GTableView();        CC_SYNTHESIZE_RETAIN(CCArray*, cellsFreed, CellsFreed);    CC_SYNTHESIZE_RETAIN(CCArray*, cellsUsed, CellsUsed);    /**     * Determines whether this view is enabled for user interaction.     * It controlls all table cells too.     */    CC_SYNTHESIZE(bool, isEnabled, IsEnabled);    /**     * data source     */    CC_SYNTHESIZE(GTableViewDataSource*, dataSource, DataSource);    /**     * delegate     */    CC_SYNTHESIZE(GTableViewDelegate*, tDelegate, TDelegate);    /**     * An intialized table view object     *     * @param dataSource data source     * @param size view size     * @return table view     */    static GTableView* tableViewWithDataSource(GTableViewDataSource* dataSource, CCSize size);    /**     * Updates the content of the cell at a given index.     *     * @param idx index to find a cell     */    virtual void updateCellAtIndex(int idx);    /**     * Inserts a new cell at a given index     *     * @param idx location to insert     */    virtual void insertCellAtIndex(int idx);    /**     * Removes a cell at a given index     *     * @param idx index to find a cell     */    virtual void removeCellAtIndex(int idx);    /**     * reloads data from data source.  the view will be refreshed.     */    virtual void reloadData();    /**     * Dequeues a free cell if available. NULL if not.     *     * @return free cell     */    virtual GTableViewCell* dequeueCell();        virtual int indexFromOffset(CCPoint offset);    virtual int indexFromOffsetForCall(CCPoint offset);    virtual CCPoint offsetFromIndex(int index);    virtual void updateContentSize();    virtual GTableViewCell* cellWithIndex(int cellIndex);    virtual void moveCellOutOfSight(GTableViewCell *cell);    virtual void evictCell();    virtual void setIndex(int index, GTableViewCell *cell);    virtual void addCellIfNecessary(GTableViewCell *cell);    virtual bool initWithViewSize(CCSize size);        virtual void setDelegate(GScrollViewDelegate* delegate);    virtual void scrollViewDidScroll(GScrollView *view);        virtual void ccTouchesEnded(CCSet *touches, CCEvent *event);};#endif // __GTableView_H__